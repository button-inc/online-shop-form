import React, { PureComponent } from 'react';
import JsonSchemaForm from 'react-jsonschema-form';
import widgets from 'formConfig/widgets';

const schema = {
  title: 'Example Form',
  type: 'object',
  required: ['email'],
  properties: {
    firstName: { type: 'string', title: 'First Name', name: 'firstName' },
    lastName: { type: 'string', title: 'Last Name', name: 'lastName' },
    password: { type: 'string', title: 'Password', name: 'password', inputType: 'password' },
    email: { type: 'string', title: 'Email', name: 'email', inputType: 'email', isRequired: true },
    checkbox: { type: 'boolean', title: 'Checkbox', default: false, name: 'checkbox' },
    select: {
      type: 'string',
      title: 'selection',
      name: 'select',
      enum: ['one', 'two', 'three'],
      default: 'one',
    },
  },
};

const uiSchema = {
  checkbox: {
    'ui:widget': 'checkbox',
    // BC design guide nests the checkbox in a label, so can hide default generated by jsonSchema
    'ui:label': false,
  },
};

const log = type => () => {};

export default class Home extends PureComponent {
  render() {
    return (
      <div className="container">
        <JsonSchemaForm
          name="my-form"
          action="/api/application"
          method="post"
          formData={{ title: 'form title' }}
          schema={schema}
          uiSchema={uiSchema}
          widgets={widgets}
          onChange={log('changed')}
          onSubmit={data => console.log(data.formData)}
          onError={log('errors')}
        />
        {/* .error-detail class styles errors below fields,
            .panel-danger for top error message
        */}
        <style jsx global>
          {`
            label {
              font-family: ‘BCSans’, ‘Noto Sans’, Verdana, Arial, sans-serif;
              font-size: 18px;
              padding-right: 2px;
            }

            .text-danger {
              color: red;
            }

            .panel-danger {
              border: 2px solid red;
            }
          `}
        </style>
      </div>
    );
  }
}

export async function getServerSideProps(context) {
  return {
    props: {},
  };
}
